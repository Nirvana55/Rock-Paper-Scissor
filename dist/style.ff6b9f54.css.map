{"version":3,"sources":["..\\css\\components\\_basic.scss","..\\css\\helper\\_colors.scss","..\\css\\helper\\_fonts.scss","..\\css\\helper\\_breakpoint.scss","..\\css\\components\\_ruleBtn.scss","..\\css\\components\\_btnreset.scss","..\\css\\layouts\\_headerbox.scss","..\\css\\mixins\\_mixins.scss","..\\css\\layouts\\_gameBtn.scss","..\\css\\layouts\\_rulesbgrnd.scss","..\\css\\layouts\\_game.scss"],"names":[],"mappings":"AAAA;AAAA;AAAA;EAGC;EACA;EACA;;;AAGD;EACC;EACA;EACA;EACA,YCFY;EDIZ,aEdO;;;AFiBR;EACC;EACA;EACA;;AG+hBC;EHliBF;IAKE;IACA;;;;AItBF;EACC;EACA;EACA;EAEA;EACA;EACA;;AD2iBC;ECljBF;IAUE;IACA;IAEA;IACA;;;AAED;EACC;EAEA;EACA;EAEA;EAEA;EACA;EAEA,aF5BM;EE8BN;EAEA;EAEA;EAEA;;;ACpCF;EACC;EACA,aHFO;EGIP;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;;AFsiBC;EEnjBF;IAgBE;IACA;IACA;IAEA;;;;ACnBF;EACC;EACA;EAEA;EACA;EAEA;EACA;ECRA;EACA,gBDSsB;ECRtB,iBDQ8B;;AHwiB7B;EGljBF;IAYE;;;AAGD;ECfA;EACA,gBDeuB;ECdvB,iBDc+B;;AAE9B;EACC;EACA;EACA;;AH6hBD;EGhiBA;IAME;IACA;;;AAIH;EACC;EACA;EACA;EACA;EAEA;ECnCD;EACA,gBDoCuB;ECnCvB,iBDmC+B;EAC9B;;AH4gBA;EGrhBD;IAYE;IACA;;;AAED;EACC;EAEA,OLzCS;EK0CT;EACA;;AAED;EACC,OL/CQ;EKgDR;EACA;EACA;EAEA;;AHyfD;EG/fA;IAQE;;;;AE3DJ;EACC;EACA;EAEA;EACA;EACA;EACA;EAEA;;ALyiBC;EKljBF;IAYE;;;ALsiBA;EKljBF;IAeE;IAEA;IACA;;;AAGD;EACC;EACA;EACA;EACA;;ALyhBA;EK7hBD;IAME;IACA;;;ADtBF;EACC;EACA;EACA;EAEA;EACA;EAEA;EACA;EAEA;;AJiiBA;EI5iBD;IAcE;IACA;;;AAGF;EACC;EACA;EAEA;EAEA;EACA;EACA;EAEA;EACA;;AJ+gBA;EI1hBD;IAcE;IACA;;;AAIF;EACC,YN5Ce;;AM8ChB;EACC,YNhDkB;;AMkDnB;EACC,YNjDa;;;AQDf;EACC;EACA;EACA;EACA;EACA;EACA;EACA;;AN2iBC;EMljBF;IAUE;;;AAED;EFZA;EACA,gBEYuB;EFXvB,iBEW+B;EAC9B;EACA;;ANmiBA;EMtiBD;IAME;IACA;IAEA;IACA;IACA;IACA;;;AAGD;EACC;EACA,ORxBQ;EQyBR;;ANohBD;EMvhBA;IAKE;IACA;IACA;IACA;;;AAGF;EACC;;AN2gBD;EM5gBA;IAGE;IACA;IAEA;IACA;;;AAGF;EACC;;ANigBD;EMlgBA;IAGE;IACA;IACA;;;;ACtDJ;EACC;EACA;EACA;EAEA;EACA;EAEA;EAEA;EAEA;EACA;;APsiBC;EOnjBF;IAgBE;IAEA;IAEA;IACA;IACA;IACA;;;AAGD;AAAA;EAEC;EACA;EACA;EACA;;APohBA;EOzhBD;AAAA;IAQE;IACA;;;AAIF;EACC;EACA;EACA;EAEA;EACA;;APsgBA;EO5gBD;IASE;;;AAMD;AAAA;EACC;EACA;;AP2fD;EO7fA;AAAA;IAIE;IACA;;;AAED;AAAA;EACC;EACA;;APofF;EOtfC;AAAA;IAIE;IACA;;;AAED;AAAA;EACC;;AAMJ;EACC;EACA;EAEA;;APoeA;EOxeD;IAME;IACA;;;AAIF;EACC;EACA;EAEA;EACA;;APwdA;EO7dD;IAOE;;;AHtFF;EACC;EACA;EACA;EAEA;EACA;EAEA;EACA;EAEA;;AJiiBA;EI5iBD;IAcE;IACA;;;AAGF;EACC;EACA;EAEA;EAEA;EACA;EACA;EAEA;EACA;;AJ+gBA;EI1hBD;IAcE;IACA;;;AAIF;EACC,YN5Ce;;AM8ChB;EACC,YNhDkB;;AMkDnB;EACC,YNjDa","file":"style.ff6b9f54.css","sourceRoot":"..\\html","sourcesContent":["*,\r\n::before,\r\n::after {\r\n\tbox-sizing: border-box;\r\n\tlist-style-type: none;\r\n\ttext-decoration: none;\r\n}\r\n\r\nbody {\r\n\tpadding: 0;\r\n\tmargin: 0;\r\n\tmin-height: 90vh;\r\n\tbackground: $background;\r\n\r\n\tfont-family: $fonts;\r\n}\r\n\r\n.container {\r\n\tmax-width: 1200px;\r\n\twidth: 85%;\r\n\tmargin: 0 auto;\r\n\t@include media('>=tablet') {\r\n\t\tmax-width: 620px;\r\n\t\twidth: 60%;\r\n\t}\r\n}\r\n","$scissors-Gradient: radial-gradient(hsl(39, 89%, 49%), hsl(40, 84%, 53%));\r\n$paper-Gradient: radial-gradient(hsl(230, 89%, 62%), hsl(230, 89%, 65%));\r\n$rockGradient: radial-gradient(hsl(349, 71%, 52%), hsl(349, 70%, 56%));\r\n$lizardGradient: radial-gradient(hsl(261, 73%, 60%), hsl(261, 72%, 63%));\r\n$cyan: radial-gradient(hsl(189, 59%, 53%), hsl(189, 58%, 57%));\r\n\r\n$darkText: hsl(229, 25%, 31%);\r\n$scoreText: hsl(229, 64%, 46%);\r\n$headerOutline: hsl(217, 16%, 45%);\r\n\r\n$background: radial-gradient(\r\n\tcircle at 50%,\r\n\thsl(214, 47%, 23%),\r\n\thsl(237, 49%, 15%)\r\n);\r\n","$fonts: 'Barlow Semi Condensed', sans-serif;\r\n","@charset \"UTF-8\";\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n\t'phone': 380px,\r\n\t'tablet': 768px,\r\n\t'desktop': 1024px,\r\n\t'lgdesktop': 1920px,\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n\t'screen': 'screen',\r\n\t'print': 'print',\r\n\t'handheld': 'handheld',\r\n\t'landscape': '(orientation: landscape)',\r\n\t'portrait': '(orientation: portrait)',\r\n\t'retina2x':\r\n\t\t'(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n\t'retina3x':\r\n\t\t'(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)',\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n\t'px': 1,\r\n\t'em': 0.01,\r\n\t'rem': 0.1,\r\n\t'': 0,\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n\t@if feature-exists('at-error') {\r\n\t\t@error $message;\r\n\t} @else {\r\n\t\t@warn $message;\r\n\t\t$_: noop();\r\n\t}\r\n\r\n\t@return $message;\r\n}\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n\t@if im-log($message) {\r\n\t}\r\n}\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {\r\n}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n\t$no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n\t@if not $no-media-breakpoint-value {\r\n\t\t@if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {\r\n\t\t}\r\n\t}\r\n\r\n\t@each $condition in $conditions {\r\n\t\t@if not map-has-key($media-expressions, $condition) {\r\n\t\t\t$operator: get-expression-operator($condition);\r\n\t\t\t$prefix: get-expression-prefix($operator);\r\n\t\t\t$value: get-expression-value($condition, $operator);\r\n\r\n\t\t\t@if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n\t\t\t\t($prefix == 'min' and $value > $no-media-breakpoint-value)\r\n\t\t\t{\r\n\t\t\t\t@return false;\r\n\t\t\t}\r\n\t\t} @else if not index($im-no-media-expressions, $condition) {\r\n\t\t\t@return false;\r\n\t\t}\r\n\t}\r\n\r\n\t@return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n\t@each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n\t\t@if str-index($expression, $operator) {\r\n\t\t\t@return $operator;\r\n\t\t}\r\n\t}\r\n\r\n\t// It is not possible to include a mixin inside a function, so we have to\r\n\t// rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n\t// functions cannot be called anywhere in Sass, we need to hack the call in\r\n\t// a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n\t// Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n\t$_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n\t$operator-index: str-index($expression, $operator);\r\n\t$parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n\t$dimension: 'width';\r\n\r\n\t@if str-length($parsed-dimension) > 0 {\r\n\t\t$dimension: $parsed-dimension;\r\n\t}\r\n\r\n\t@return $dimension;\r\n}\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n\t@return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n\t$operator-index: str-index($expression, $operator);\r\n\t$value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n\t@if map-has-key($breakpoints, $value) {\r\n\t\t$value: map-get($breakpoints, $value);\r\n\t} @else {\r\n\t\t$value: to-number($value);\r\n\t}\r\n\r\n\t$interval: map-get($unit-intervals, unit($value));\r\n\r\n\t@if not $interval {\r\n\t\t// It is not possible to include a mixin inside a function, so we have to\r\n\t\t// rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n\t\t// functions cannot be called anywhere in Sass, we need to hack the call in\r\n\t\t// a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n\t\t// Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n\t\t$_: im-log('Unknown unit `#{unit($value)}`.');\r\n\t}\r\n\r\n\t@if $operator == '>' {\r\n\t\t$value: $value + $interval;\r\n\t} @else if $operator == '<' {\r\n\t\t$value: $value - $interval;\r\n\t}\r\n\r\n\t@return $value;\r\n}\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n\t// If it is part of $media-expressions, it has no operator\r\n\t// then there is no need to go any further, just return the value\r\n\t@if map-has-key($media-expressions, $expression) {\r\n\t\t@return map-get($media-expressions, $expression);\r\n\t}\r\n\r\n\t$operator: get-expression-operator($expression);\r\n\t$dimension: get-expression-dimension($expression, $operator);\r\n\t$prefix: get-expression-prefix($operator);\r\n\t$value: get-expression-value($expression, $operator);\r\n\r\n\t@return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n\t@if length($list) < 1 or $start > $end {\r\n\t\t@return ();\r\n\t}\r\n\r\n\t$result: ();\r\n\r\n\t@for $i from $start through $end {\r\n\t\t$result: append($result, nth($list, $i));\r\n\t}\r\n\r\n\t@return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n\t@if type-of($value) == 'number' {\r\n\t\t@return $value;\r\n\t} @else if type-of($value) != 'string' {\r\n\t\t$_: im-log('Value for `to-number` should be a number or a string.');\r\n\t}\r\n\r\n\t$first-character: str-slice($value, 1, 1);\r\n\t$result: 0;\r\n\t$digits: 0;\r\n\t$minus: ($first-character == '-');\r\n\t$numbers: (\r\n\t\t'0': 0,\r\n\t\t'1': 1,\r\n\t\t'2': 2,\r\n\t\t'3': 3,\r\n\t\t'4': 4,\r\n\t\t'5': 5,\r\n\t\t'6': 6,\r\n\t\t'7': 7,\r\n\t\t'8': 8,\r\n\t\t'9': 9,\r\n\t);\r\n\r\n\t// Remove +/- sign if present at first character\r\n\t@if ($first-character == '+' or $first-character == '-') {\r\n\t\t$value: str-slice($value, 2);\r\n\t}\r\n\r\n\t@for $i from 1 through str-length($value) {\r\n\t\t$character: str-slice($value, $i, $i);\r\n\r\n\t\t@if not(index(map-keys($numbers), $character) or $character == '.') {\r\n\t\t\t@return to-length(if($minus, -$result, $result), str-slice($value, $i));\r\n\t\t}\r\n\r\n\t\t@if $character == '.' {\r\n\t\t\t$digits: 1;\r\n\t\t} @else if $digits == 0 {\r\n\t\t\t$result: $result * 10 + map-get($numbers, $character);\r\n\t\t} @else {\r\n\t\t\t$digits: $digits * 10;\r\n\t\t\t$result: $result + map-get($numbers, $character) / $digits;\r\n\t\t}\r\n\t}\r\n\r\n\t@return if($minus, -$result, $result);\r\n}\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n\t$units: (\r\n\t\t'px': 1px,\r\n\t\t'cm': 1cm,\r\n\t\t'mm': 1mm,\r\n\t\t'%': 1%,\r\n\t\t'ch': 1ch,\r\n\t\t'pc': 1pc,\r\n\t\t'in': 1in,\r\n\t\t'em': 1em,\r\n\t\t'rem': 1rem,\r\n\t\t'pt': 1pt,\r\n\t\t'ex': 1ex,\r\n\t\t'vw': 1vw,\r\n\t\t'vh': 1vh,\r\n\t\t'vmin': 1vmin,\r\n\t\t'vmax': 1vmax,\r\n\t);\r\n\r\n\t@if not index(map-keys($units), $unit) {\r\n\t\t$_: im-log('Invalid unit `#{$unit}`.');\r\n\t}\r\n\r\n\t@return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Kitty Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n\t// Save global configuration\r\n\t$global-breakpoints: $breakpoints;\r\n\t$global-media-expressions: $media-expressions;\r\n\r\n\t// Update global configuration\r\n\t$breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n\t$media-expressions: map-merge(\r\n\t\t$media-expressions,\r\n\t\t$tweak-media-expressions\r\n\t) !global;\r\n\r\n\t@content;\r\n\r\n\t// Restore global configuration\r\n\t$breakpoints: $global-breakpoints !global;\r\n\t$media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n\t@if ($im-media-support and length($conditions) == 0) or\r\n\t\t(not $im-media-support and im-intercepts-static-breakpoint($conditions...))\r\n\t{\r\n\t\t@content;\r\n\t} @else if ($im-media-support and length($conditions) > 0) {\r\n\t\t@media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n\t\t\t// Recursive call\r\n\t\t\t@include media(slice($conditions, 2)...) {\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","//Rule Btn\r\n#btn {\r\n\tposition: absolute;\r\n\tbottom: 35px;\r\n\twidth: 120px;\r\n\r\n\tmargin: 0 auto;\r\n\tleft: 0;\r\n\tright: 0;\r\n\r\n\t@include media('>=tablet') {\r\n\t\tbottom: 30px;\r\n\t\tright: 0;\r\n\r\n\t\tmargin-top: 0;\r\n\t\tmargin-right: 1.5rem;\r\n\t}\r\n\t#rules {\r\n\t\tborder: 2.5px solid $headerOutline;\r\n\r\n\t\tcolor: white;\r\n\t\tbackground-color: transparent;\r\n\r\n\t\ttext-transform: uppercase;\r\n\r\n\t\tpadding: 0.5em 2em;\r\n\t\tborder-radius: 8px;\r\n\r\n\t\tfont-family: $fonts;\r\n\r\n\t\tfont-size: 15px;\r\n\r\n\t\tletter-spacing: 0.2rem;\r\n\r\n\t\topacity: 0.8;\r\n\r\n\t\tcursor: pointer;\r\n\t}\r\n}\r\n","#btn__reset {\r\n\ttext-transform: uppercase;\r\n\tfont-family: $fonts;\r\n\r\n\tpadding: 0.6em 2.8em;\r\n\tfont-size: 17px;\r\n\tcolor: $darkText;\r\n\tletter-spacing: 0.1rem;\r\n\r\n\tbackground-color: white;\r\n\tborder: none;\r\n\tborder-radius: 5px;\r\n\r\n\tcursor: pointer;\r\n\r\n\t@include media('>=tablet') {\r\n\t\tpadding: 0.6rem 1.8rem;\r\n\t\tfont-size: 12px;\r\n\t\tfont-weight: 600;\r\n\r\n\t\tcolor: red;\r\n\t}\r\n}\r\n","//this is the header box scss\r\n.heading {\r\n\tmargin-top: 1.5rem;\r\n\tpadding: 15px;\r\n\r\n\tborder: 3px solid $headerOutline;\r\n\tborder-radius: 8px;\r\n\r\n\tcolor: white;\r\n\ttext-transform: uppercase;\r\n\r\n\t@include global__Flex(normal, space-between);\r\n\t@include media('>=tablet') {\r\n\t\tpadding: 20px;\r\n\t}\r\n\r\n\t.headers {\r\n\t\t@include global__Flex(column, center);\r\n\r\n\t\tspan {\r\n\t\t\tfont-size: 27px;\r\n\t\t\tline-height: 1.4rem;\r\n\t\t\tfont-weight: 700;\r\n\r\n\t\t\t@include media('>=tablet') {\r\n\t\t\t\tfont-size: 35px;\r\n\t\t\t\tline-height: 1.7rem;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t.scoreBox {\r\n\t\tbackground-color: white;\r\n\t\twidth: 85px;\r\n\t\theight: 85px;\r\n\t\tborder-radius: 5px;\r\n\r\n\t\tline-height: 2rem;\r\n\r\n\t\t@include global__Flex(column, center);\r\n\t\ttext-align: center;\r\n\r\n\t\t@include media('>=tablet') {\r\n\t\t\twidth: 115px;\r\n\t\t\theight: 100px;\r\n\t\t}\r\n\t\t#score {\r\n\t\t\tletter-spacing: 0.2rem;\r\n\r\n\t\t\tcolor: $scoreText;\r\n\t\t\tfont-size: 12px;\r\n\t\t\tmargin: 0;\r\n\t\t}\r\n\t\t#scoreNumber {\r\n\t\t\tcolor: $darkText;\r\n\t\t\tfont-size: 45px;\r\n\t\t\tmargin: 0;\r\n\t\t\tmargin-bottom: 0.8rem;\r\n\r\n\t\t\tfont-weight: 700;\r\n\t\t\t@include media('>=tablet') {\r\n\t\t\t\tfont-size: 50px;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","@mixin global__Flex($flex-direction, $justify-content) {\r\n\tdisplay: flex;\r\n\tflex-direction: $flex-direction;\r\n\tjustify-content: $justify-content;\r\n}\r\n\r\n@mixin allBtn {\r\n\t.btn__Circle {\r\n\t\tborder-radius: 50%;\r\n\t\twidth: 130px;\r\n\t\theight: 130px;\r\n\r\n\t\tbox-shadow: inset 0 -5px rgba(0, 0, 0, 0.3);\r\n\t\tborder: none;\r\n\r\n\t\tmargin: 0 auto;\r\n\t\tcursor: pointer;\r\n\r\n\t\ttransition: 1s;\r\n\r\n\t\t@include media('>=tablet') {\r\n\t\t\twidth: 170px;\r\n\t\t\theight: 170px;\r\n\t\t}\r\n\t}\r\n\t.wrapper {\r\n\t\tbackground-color: white;\r\n\t\tborder-radius: 50%;\r\n\r\n\t\tbox-shadow: inset 0 5px rgba(0, 0, 0, 0.2);\r\n\r\n\t\tdisplay: inline-flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\r\n\t\twidth: 100px;\r\n\t\theight: 100px;\r\n\r\n\t\t@include media('>=tablet') {\r\n\t\t\twidth: 130px;\r\n\t\t\theight: 130px;\r\n\t\t}\r\n\t}\r\n\r\n\t.paper {\r\n\t\tbackground: $paper-Gradient;\r\n\t}\r\n\t.scissors {\r\n\t\tbackground: $scissors-Gradient;\r\n\t}\r\n\t.rock {\r\n\t\tbackground: $rockGradient;\r\n\t}\r\n}\r\n","//game__btns\r\n.game__BTN {\r\n\tmax-width: 350px;\r\n\theight: 300px;\r\n\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\r\n\tmargin: 5rem auto;\r\n\r\n\t@include media('<=phone') {\r\n\t\tmargin: 8rem auto;\r\n\t}\r\n\t@include media('>=tablet') {\r\n\t\tmargin: 3rem auto;\r\n\r\n\t\tmax-width: 505px;\r\n\t\theight: 400px;\r\n\t}\r\n\r\n\t#triangleImg {\r\n\t\tposition: absolute;\r\n\t\tz-index: -1;\r\n\t\ttop: 40%;\r\n\t\theight: 28%;\r\n\t\t@include media('>=tablet') {\r\n\t\t\ttop: 40%;\r\n\t\t\theight: 35%;\r\n\t\t}\r\n\t}\r\n\t@include allBtn;\r\n}\r\n","//rules Background Overlay\r\n.rules {\r\n\tposition: absolute;\r\n\tbackground-color: white;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tleft: 0;\r\n\tdisplay: none;\r\n\r\n\t@include media('>=tablet') {\r\n\t\tbackground-color: rgba(0, 0, 0, 0.541);\r\n\t}\r\n\t.rules__Background {\r\n\t\t@include global__Flex(column, center);\r\n\t\talign-items: center;\r\n\t\tmargin: 60px auto;\r\n\r\n\t\t@include media('>=tablet') {\r\n\t\t\twidth: 420px;\r\n\t\t\theight: 400px;\r\n\r\n\t\t\tmargin: 140px auto 100px auto;\r\n\t\t\tflex-wrap: wrap;\r\n\t\t\tbackground-color: white;\r\n\t\t\tborder-radius: 10px;\r\n\t\t}\r\n\r\n\t\th1 {\r\n\t\t\tmargin-top: 5rem;\r\n\t\t\tcolor: $darkText;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t\t@include media('>=tablet') {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\ttop: 0%;\r\n\t\t\t\tleft: -30%;\r\n\t\t\t\tmargin-top: 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t#rulesImg {\r\n\t\t\tpadding: 70px 0 120px 0;\r\n\t\t\t@include media('>=tablet') {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\ttop: 5%;\r\n\r\n\t\t\t\tmargin: 0 auto;\r\n\t\t\t\tpadding: 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t#close__btn {\r\n\t\t\tcursor: pointer;\r\n\t\t\t@include media('>=tablet') {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\ttop: -80%;\r\n\t\t\t\tright: -35%;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",".game {\r\n\tdisplay: none;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\r\n\tflex-wrap: wrap;\r\n\tpadding: 80px 0;\r\n\r\n\tmargin: 0 auto;\r\n\r\n\tmax-width: 400px;\r\n\r\n\tcolor: white;\r\n\ttext-transform: uppercase;\r\n\r\n\t@include media('>=tablet') {\r\n\t\tjustify-content: space-between;\r\n\r\n\t\tpadding: 0;\r\n\r\n\t\tmin-width: 800px;\r\n\t\twidth: 60%;\r\n\t\tmargin: 5px auto;\r\n\t\theight: 350px;\r\n\t}\r\n\r\n\t.playerSelection,\r\n\t.houseSelection {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column-reverse;\r\n\t\talign-items: center;\r\n\t\tpadding: 0 16px;\r\n\r\n\t\t@include media('>=tablet') {\r\n\t\t\tflex-direction: column;\r\n\t\t\tpadding: 25px;\r\n\t\t}\r\n\t}\r\n\r\n\t.restart {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\r\n\t\torder: 1;\r\n\t\tmargin-top: 3rem;\r\n\r\n\t\t@include media('>=tablet') {\r\n\t\t\torder: 0;\r\n\t\t}\r\n\t}\r\n\r\n\t.playerSelection,\r\n\t.houseSelection {\r\n\t\t.btn__Circle {\r\n\t\t\twidth: 135px;\r\n\t\t\theight: 135px;\r\n\t\t\t@include media('>=tablet') {\r\n\t\t\t\twidth: 250px;\r\n\t\t\t\theight: 250px;\r\n\t\t\t}\r\n\t\t\t.wrapper {\r\n\t\t\t\twidth: 105px;\r\n\t\t\t\theight: 105px;\r\n\t\t\t\t@include media('>=tablet') {\r\n\t\t\t\t\twidth: 190px;\r\n\t\t\t\t\theight: 190px;\r\n\t\t\t\t}\r\n\t\t\t\timg {\r\n\t\t\t\t\twidth: 40%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t#picked {\r\n\t\tfont-size: 14px;\r\n\t\tletter-spacing: 0.1rem;\r\n\r\n\t\tmargin-top: 3.5rem;\r\n\t\t@include media('>=tablet') {\r\n\t\t\tfont-size: 16px;\r\n\t\t\tmargin-bottom: 2rem;\r\n\t\t}\r\n\t}\r\n\r\n\t#win {\r\n\t\tfont-size: 48px;\r\n\t\tmargin-bottom: 0.8rem;\r\n\r\n\t\tletter-spacing: 0.1rem;\r\n\t\tfont-weight: 700;\r\n\t\t@include media('>=tablet') {\r\n\t\t\tfont-size: 35px;\r\n\t\t}\r\n\t}\r\n\r\n\t@include allBtn;\r\n}\r\n"]}